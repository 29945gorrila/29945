if getgenv().Loaded == true then
    if getgenv().Holy.Options.UpdateNotification then
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "holy",
            Text = "Updated Your Shitty Config Bro",
            Duration = 0.01,
        })
    end
    return
end

if getgenv().Holy.Options.Intro then
    local ImageIdfr = "rbxassetid://138494005080029" -- fixed soon
    local Intro = {
        Intro = Instance.new("ScreenGui"),
        Anchored_Frame = Instance.new("Frame"),
        ImageLabel = Instance.new("ImageLabel")
    }
    
    function Tween(Object, Size1, Size2, Size3, Size4, Speed)
        Object:TweenSize(UDim2.new(Size1, Size2, Size3, Size4), Enum.EasingDirection.InOut, Enum.EasingStyle.Sine, Speed, true)
    end
    
    Intro.Intro.Name = "Intro"
    Intro.Intro.Parent = game.CoreGui
    Intro.Intro.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    Intro.Anchored_Frame.Name = "Anchored_Frame"
    Intro.Anchored_Frame.Parent = Intro.Intro
    Intro.Anchored_Frame.AnchorPoint = Vector2.new(0.5, 0.5)
    Intro.Anchored_Frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Intro.Anchored_Frame.BackgroundTransparency = 1.000
    Intro.Anchored_Frame.Position = UDim2.new(0.5, 0, 0.5, 0)
    Intro.Anchored_Frame.Size = UDim2.new(0, 100, 0, 100)
    Intro.ImageLabel.Parent = Intro.Anchored_Frame
    Intro.ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
    Intro.ImageLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Intro.ImageLabel.BackgroundTransparency = 1.000
    Intro.ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
    Intro.ImageLabel.Size = UDim2.new(0, 0, 0, 0)
    Intro.ImageLabel.Image = ImageIdfr
    Intro.ImageLabel.ScaleType = Enum.ScaleType.Crop
    local ImageLabel = game.CoreGui:FindFirstChild("Intro").Anchored_Frame.ImageLabel
    local BlurEffect = Instance.new("BlurEffect", game.Lighting)
    BlurEffect.Size = 0
    for i = 0, 24, 1 do
        wait()
        BlurEffect.Size = i
    end
    
    Tween(ImageLabel, 0, 350, 0, 395, 0.8)
    wait(2.2)
    Tween(ImageLabel, 0, 0, 0, 0, 0.8)
    for i = 24, 1, -1 do
        wait()
        BlurEffect.Size = i
    end
    wait(1)
    Intro.Intro:Destroy()
    BlurEffect:Destroy()
end

local Players = game:GetService("Players")
local StarterGui = game:GetService("StarterGui")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local InputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- ty howl
local Games = {
    [2788229376]  = { Name = "Da Hood", Argument = "UpdateMousePosI2", Remote = "MainEvent" },
    [16033173781] = {Name = "Da Hood Macro", Argument = "UpdateMousePosI2", Remote = "MainEvent"},
    [7213786345]  = {Name = "Da Hood VC", Argument = "UpdateMousePosI2", Remote = "MainEvent"},
    [9825515356]  = { Name = "Hood Customs", Argument = "MousePosUpdate", Remote = "MainEvent" },
    [5602055394]  = { Name = "Hood Modded", Argument = "MousePos", Remote = "Bullets" },
    [17403265390] = { Name = "Da Downhill", Argument = "MOUSE", Remote = "MAINEVENT" },
    [18111448661] = { Name = "Da Uphill", Argument = "MOUSE", Remote = "MAINEVENT" },
    [15186202290] = { Name = "Da Strike", Argument = "MOUSE", Remote = "MAINEVENT" },
    [17344804827] = { Name = "Yeno Hood", Argument = "UpdateMousePos", Remote = "MainEvent" },
    [17564718305] = { Name = "Da Nuketown", Argument = "MOUSE", Remote = "MAINEVENT" },
    [11143225577] = { Name = "1v1 Hood Aim Trainer", Argument = "UpdateMousePos", Remote = "MainEvent" },
    [17380542873] = { Name = "DA NUKE", Argument = "UpdateMousePos", Remote = "MainEvent" },
    [17061444544] = { Name = "Rae Hood", Argument = "UpdateMousePos", Remote = "MainEvent" },
    [14277620939] = { Name = "Custom FFA", Argument = "UpdateMousePos", Remote = "MainEvent" },
    [9183932460]  = {Name = "Untitled Hood", Argument = "UpdateMousePos", Remote = ".gg/untitledhood"},
}

local mousePositionArgument = Games[game.PlaceId] or { Argument = "UpdateMousePos", Remote = "MainEvent" }
local MainEvent = ReplicatedStorage:FindFirstChild(mousePositionArgument.Remote)

local Toggled = false
local IsLocking, TargetPlayer = false, nil
local Toggle360, TotalRotation, FullCircleRotation = false, 0, 2 * math.pi
local LastUpdate = tick()
local TriggerBotToggled = false
local TriggerBotTarget = nil
local ForceHitTarget = nil

local Settings = {
    Keybind = Enum.KeyCode[getgenv().Holy.Keybinds.Aimbot],
    Smoothing = getgenv().Holy.Combat.Aimbot.Smoothness,
    AimPredictionX = getgenv().Holy.Combat.Aimbot.PredictionX,
    AimPredictionY = getgenv().Holy.Combat.Aimbot.PredictionY,
    MouseTpSmoothing = function() return getgenv().Holy.Combat.Aimbot.MouseTp.Smoothness end,
    MouseTpPredictionX = getgenv().Holy.Combat.Aimbot.MouseTp.PredictionX, -- New X prediction
    MouseTpPredictionY = getgenv().Holy.Combat.Aimbot.MouseTp.PredictionY, -- New Y prediction
    EasingStyles = {"Linear", "Sine", "Quad", "Cubic", "Exponential", "Back", "Bounce", "Elastic"},
    EasingStyle = "Back",
    EasingDirection = "Out",
    MaxDistance = 1000,
    FieldOfView = 70,
    MinHealth = 0,
}

local SilentAim = {
    Enabled = getgenv().Holy.Combat.Silent.Enabled,
    HitChance = getgenv().Holy.Combat.Silent.HitChance,
    Prediction = getgenv().Holy.Combat.Silent.Prediction,
    TargetPart = getgenv().Holy.Combat.Silent.Part,
    TargetPlayer = nil,
}

local isA = game.IsA
local findFirstChild = game.FindFirstChild
local findPartOnRayWithIgnoreList = workspace.FindPartOnRayWithIgnoreList
local getChildren = workspace.GetChildren
local getPlayers = Players.GetPlayers
local getMouseLocation = InputService.GetMouseLocation
local worldToViewportPoint = Camera.WorldToViewportPoint
local fireServer = MainEvent.FireServer
local twait = task.wait
local tinsert = table.insert
local tfind = table.find
local newVector3 = Vector3.new
local newVector2 = Vector2.new
local newCFrame = CFrame.new
local fromAxisAngle = CFrame.fromAxisAngle
local newRay = Ray.new
local min = math.min
local random = math.random
local abs = math.abs
local rad = math.rad
local inf = math.huge
local pi = math.pi
local upper = string.upper
local sub = string.sub
local freeFall = Enum.HumanoidStateType.Freefall
local jumping = Enum.HumanoidStateType.Jumping
local enumKeyCode = Enum.KeyCode

local EasingFunctions = {
    Linear = function(t) return t end,
    Sine = function(t) return 1 - math.cos((t * pi) / 2) end,
    Quad = function(t) return t * t end,
    Cubic = function(t) return t * t * t end,
    Exponential = function(t) return t == 0 and 0 or 2 ^ (10 * (t - 1)) end,
    Back = function(t) return t * t * (2.70158 * t - 1.70158) end,
    Bounce = function(t)
        if t < 1 / 2.75 then return 7.5625 * t * t
        elseif t < 2 / 2.75 then t = t - 1.5 / 2.75; return 7.5625 * t * t + 0.75
        elseif t < 2.5 / 2.75 then t = t - 2.25 / 2.75; return 7.5625 * t * t + 0.9375
        else t = t - 2.625 / 2.75; return 7.5625 * t * t + 0.984375 end
    end,
    Elastic = function(t)
        if t == 0 or t == 1 then return t end
        return -2 ^ (10 * (t - 1)) * math.sin((t - 1.075) * (2 * pi) / 0.3)
    end
}

local function applyEasing(t, easingStyle, easingDirection)
    local ease = EasingFunctions[easingStyle] or EasingFunctions.Linear
    local easedValue
    if easingDirection == 'In' then easedValue = ease(t)
    elseif easingDirection == 'Out' then easedValue = 1 - ease(1 - t)
    elseif easingDirection == 'InOut' then easedValue = t < 0.5 and ease(2 * t) / 2 or 1 - ease(2 * (1 - t)) / 2
    else easedValue = t end
    return easedValue
end

local function isPlayerAlive(player)
    local character = player.Character
    return character and findFirstChild(character, "Humanoid") and findFirstChild(character, "Head")
end

local function wallCheck(character)
    if not getgenv().Holy.Checks.WallCheck then return true end
    local targetPosition = character.HumanoidRootPart.Position
    local cameraPosition = Camera.CFrame.Position
    local distance = (targetPosition - cameraPosition).Magnitude
    local hitPart = findPartOnRayWithIgnoreList(workspace, newRay(cameraPosition, (targetPosition - cameraPosition).Unit * distance), { LocalPlayer.Character, character })
    return hitPart == nil or (hitPart.Position - cameraPosition).Magnitude >= distance
end

local function velocityCheck(character)
    if not getgenv().Holy.Checks.Resolver.Enabled then return false end
    local humanoidRootPart = character.HumanoidRootPart
    local humanoid = character.Humanoid
    local velocity = humanoidRootPart.Velocity
    local yVelocity = abs(velocity.Y)
    if (yVelocity > 5 and humanoid:GetState() ~= freeFall) or yVelocity > 35 or abs(velocity.X) > 35 or abs(velocity.Z) > 35 then
        return true
    end
    return false
end

local function adjustPrediction(config, part)
    if not config.PredictionAdjuster then
        return config.Prediction or (config.PredictionX and config.PredictionY and {X = config.PredictionX, Y = config.PredictionY})
    end
    local prediction = config.Prediction or config.PredictionX
    local velocity = part.Velocity
    local max = getgenv().Holy.PredictionAdjuster.VelocityThreshold
    return prediction + ((prediction * 1.5) - prediction) * min(velocity.Magnitude / max, 1)
end

local function getClosestPlayerToCursor(radius)
    local shortestDistance = radius
    local closestPlayer = nil
    local mousePosition = getMouseLocation(InputService)
    local part = getgenv().Holy.Combat.Aimbot.Part
    for _, player in next, getPlayers(Players) do
        local character = player.Character
        if player ~= LocalPlayer and isPlayerAlive(player) and wallCheck(character) then
            local targetPart = findFirstChild(character, part)
            if targetPart then
                local onScreenPosition, isOnScreen = worldToViewportPoint(Camera, targetPart.Position)
                local distance = (newVector2(onScreenPosition.X, onScreenPosition.Y) - mousePosition).Magnitude
                if distance < shortestDistance and isOnScreen then
                    closestPlayer = player
                    shortestDistance = distance
                end
            end
        end
    end
    return closestPlayer
end

local function getClosestPartFromPlayerToCursor(multipleParts, character)
    local shortestDistance = inf
    local closestPart = nil
    local mousePosition = getMouseLocation(InputService)
    local parts = multipleParts.Parts
    local indexAmount = 0
    for _, part in next, getChildren(character) do
        if isA(part, "BasePart") and tfind(parts, part.Name) then
            local onScreenPosition = worldToViewportPoint(Camera, part.Position)
            local distance = (newVector2(onScreenPosition.X, onScreenPosition.Y) - mousePosition).Magnitude
            if distance < shortestDistance then
                closestPart = part
                shortestDistance = distance
            end
            indexAmount = indexAmount + 1
        end
        if indexAmount >= #parts then break end
    end
    return closestPart
end

local function resolvePartVelocity(part)
    local lastPosition = part.Position
    twait(0.145)
    local currentPosition = part.Position
    return (currentPosition - lastPosition) / 0.145
end

local function getRandomVector3(aimbot)
    local positiveShakeAmount = aimbot.Shake.Amount
    local negativeShakeAmount = -positiveShakeAmount
    local factor = 0.01
    return newVector3(
        random(-negativeShakeAmount, positiveShakeAmount) * factor,
        random(-negativeShakeAmount, positiveShakeAmount) * factor,
        random(-negativeShakeAmount, positiveShakeAmount) * factor
    )
end

local function getAimAssistPredictedPosition(target, isMouseTp)
    local partName = isMouseTp and getgenv().Holy.Combat.Aimbot.MouseTp.Part or getgenv().Holy.Combat.Aimbot.Part
    local character = target.Character
    if not character then return nil end
    local Part = findFirstChild(character, partName)
    if not Part then return nil end
    local Velocity = Part.AssemblyLinearVelocity or Part.Velocity
    if not Velocity then return Part.Position end
    if isMouseTp then
        local PredictionX = Settings.MouseTpPredictionX
        local PredictionY = Settings.MouseTpPredictionY
        return Part.Position + Vector3.new(
            Velocity.X * PredictionX,
            Velocity.Y * PredictionY,
            Velocity.Z * PredictionX
        )
    else
        local PredictionX = getgenv().Holy.Combat.Aimbot.PredictionX
        local PredictionY = getgenv().Holy.Combat.Aimbot.PredictionY
        return Part.Position + Vector3.new(
            Velocity.X * PredictionX,
            Velocity.Y * PredictionY,
            Velocity.Z * PredictionX
        )
    end
end

RunService.Heartbeat:Connect(function(deltaTime)
    local aimbot = getgenv().Holy.Combat.Aimbot
    if TargetPlayer and IsLocking and TargetPlayer.Character and aimbot.Enabled then
        local character = TargetPlayer.Character
        local humanoid = findFirstChild(character, "Humanoid")
        if not humanoid then return end
        local isFalling = humanoid:GetState() == freeFall
        local targetData = isFalling and aimbot.MouseTp or aimbot
        local targetPart = aimbot.MultipleParts.Enabled and getClosestPartFromPlayerToCursor(aimbot.MultipleParts, character) or findFirstChild(character, aimbot.Part)
        if not targetPart then return end
        local alpha = targetData.Smoothness
        local goalPosition
        if not velocityCheck(character) then
            goalPosition = getAimAssistPredictedPosition(TargetPlayer, isFalling and true or false) or targetPart.Position
        else
            goalPosition = targetPart.Position + (resolvePartVelocity(targetPart) * adjustPrediction(targetData, targetPart))
        end
        if aimbot.Shake.Enabled then
            goalPosition = goalPosition + getRandomVector3(aimbot)
        end
        local goal = newCFrame(Camera.CFrame.Position, goalPosition)
        local easedProgress = applyEasing(1 - math.pow(1 - alpha, deltaTime * 60), Settings.EasingStyle, Settings.EasingDirection)
        Camera.CFrame = Camera.CFrame:Lerp(goal, easedProgress)

        local checks = getgenv().Holy.Checks
        if checks.KnockedChecks then
            local isKO = findFirstChild(character, "BodyEffects") and findFirstChild(character.BodyEffects, "K.O").Value
            local isGrabbed = findFirstChild(character, "GRABBING_CONSTRAINT") ~= nil
            if humanoid.Health <= 0 or isKO or isGrabbed then
                TargetPlayer = nil
                IsLocking = false
                Toggled = false
                SilentAim.Enabled = false
                SilentAim.TargetPlayer = nil
            end
        end
        if checks.TargetDeath and humanoid.Health <= 0 then
            TargetPlayer = nil
            IsLocking = false
            Toggled = false
            SilentAim.Enabled = false
            SilentAim.TargetPlayer = nil
        end
        if checks.PlayerDeath and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid.Health <= 0 then
            TargetPlayer = nil
            IsLocking = false
            Toggled = false
            SilentAim.Enabled = false
            SilentAim.TargetPlayer = nil
        end
    end
end)

local function updateMousePosition(position)
    fireServer(MainEvent, mousePositionArgument.Argument, position)
end

local function handleMouseTp(deltaTime)
    local mouseTpEnabled = getgenv().Holy.Combat.Aimbot.MouseTp.Enabled
    if not mouseTpEnabled then return end
    if not IsLocking or not TargetPlayer then return end

    local character = TargetPlayer.Character
    if not character then return end
    local humanoid = findFirstChild(character, "Humanoid")
    local targetPart = findFirstChild(character, getgenv().Holy.Combat.Aimbot.MouseTp.Part)
    if not humanoid or not targetPart then return end

    local predictedPosition = getAimAssistPredictedPosition(TargetPlayer, true) or targetPart.Position
    local delta = tick() - LastUpdate
    local speed = math.clamp(Settings.MouseTpSmoothing(), 0, 1)
    local alpha = 1 - math.pow(1 - speed, delta * 60)
    local easedProgress = applyEasing(alpha, Settings.EasingStyle, Settings.EasingDirection)
    local screenPos, onScreen = Camera:WorldToViewportPoint(predictedPosition)

    if onScreen and MainEvent then
        local currentMousePos = newVector2(Mouse.X, Mouse.Y)
        local targetPos = newVector2(screenPos.X, screenPos.Y)
        local newPos = currentMousePos:Lerp(targetPos, easedProgress)
        updateMousePosition(newVector3(newPos.X, newPos.Y, 0))
        LastUpdate = tick()
    end
end

RunService.RenderStepped:Connect(function(deltaTime)
    local combat = getgenv().Holy.Combat
    if Toggle360 and combat["360"].Enabled then
        local rotationIncrement = rad(combat["360"].Speed * deltaTime)
        local remainingRotation = FullCircleRotation - TotalRotation
        rotationIncrement = rotationIncrement > remainingRotation and remainingRotation or rotationIncrement
        local rotation = fromAxisAngle(newVector3(0, 1, 0), rotationIncrement)
        Camera.CFrame = Camera.CFrame * rotation
        TotalRotation = TotalRotation + rotationIncrement
        if TotalRotation >= FullCircleRotation then
            Toggle360 = false
            TotalRotation = 0
        end
    end
    handleMouseTp(deltaTime)
end)

local function rayBoxIntersect(rayOrigin, rayDirection, boxCenter, boxSize)
    local halfSize = Vector3.new(boxSize.X / 2, boxSize.Y / 2, boxSize.Z / 2)
    local minBox = boxCenter - halfSize
    local maxBox = boxCenter + halfSize

    local t1 = (minBox.X - rayOrigin.X) / rayDirection.X
    local t2 = (maxBox.X - rayOrigin.X) / rayDirection.X
    local t3 = (minBox.Y - rayOrigin.Y) / rayDirection.Y
    local t4 = (maxBox.Y - rayOrigin.Y) / rayDirection.Y
    local t5 = (minBox.Z - rayOrigin.Z) / rayDirection.Z
    local t6 = (maxBox.Z - rayOrigin.Z) / rayDirection.Z

    local tmin = math.max(math.max(math.min(t1, t2), math.min(t3, t4)), math.min(t5, t6))
    local tmax = math.min(math.min(math.max(t1, t2), math.max(t3, t4)), math.max(t5, t6))

    if tmax < 0 or tmin > tmax then return false end
    return true
end

RunService.PostSimulation:Connect(function()
    local triggerBot = getgenv().Holy.Combat.TriggerBot
    if triggerBot.Enabled and TriggerBotToggled and TriggerBotTarget then
        local hrp = TriggerBotTarget.Character and TriggerBotTarget.Character:FindFirstChild("HumanoidRootPart")
        local humanoid = TriggerBotTarget.Character and TriggerBotTarget.Character:FindFirstChild("Humanoid")
        local playerTool = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Tool")
        
        -- Health check: Unlock if health < 1
        if humanoid and humanoid.Health < 1 then
            TriggerBotTarget = nil
            return -- Exit early since target is invalid
        end

        if hrp and playerTool then
            local toolName = playerTool.Name
            local validTool = toolName == "[DoubleBarrel]" or toolName == "[Revolver]" or toolName == "[TacticalShotgun]"
            local toolScript = playerTool:FindFirstChild("Script")
            local ammo = toolScript and toolScript:FindFirstChild("Ammo")
            local hasAmmo = ammo and ammo.Value > 0
            if validTool and hasAmmo then
                local aimPos = hrp.Position + hrp.Velocity * triggerBot.Prediction
                local boxCenter = hrp.Position
                local boxSize = Vector3.new(triggerBot.Box.X, triggerBot.Box.Y, triggerBot.Box.Z)
                local rayOrigin = Camera.CFrame.Position
                local rayDirection = Camera.CFrame.LookVector
                if rayBoxIntersect(rayOrigin, rayDirection, boxCenter, boxSize) then
                    local screenPos, onScreen = Camera:WorldToViewportPoint(aimPos)
                    if onScreen then
                        local mousePos = Camera.ViewportSize * 0.5
                        local distance = (mousePos - newVector2(screenPos.X, screenPos.Y)).Magnitude
                        if distance <= triggerBot.Radius then
                            local activateTool = function()
                                playerTool:Activate()
                            end
                            if triggerBot.UseDelay then
                                task.delay(triggerBot.Delay, activateTool)
                            else
                                activateTool()
                            end
                        end
                    end
                end
            end
        end
    end
end)

local function GetSilentPredictedPosition(target)
    local character = target.Character
    if not character then return nil end
    local Part = findFirstChild(character, SilentAim.TargetPart)
    if not Part then return nil end
    local Velocity = Part.AssemblyLinearVelocity or Part.Velocity
    if not Velocity then return Part.Position end
    local PredictionTime = SilentAim.Prediction
    local basePosition = Part.Position + Velocity * PredictionTime
    -- Apply head offset if targeting Head
    if SilentAim.TargetPart == "Head" then
        local headOffset = getgenv().Holy.Combat.Silent.Offsets.Head.Amount
        basePosition = basePosition + Vector3.new(0, headOffset, 0)
    end
    return basePosition
end

local Meta = getrawmetatable(game)
local OldIndex = Meta.__index
setreadonly(Meta, false)
Meta.__index = function(t, k)
    if SilentAim.Enabled and tostring(k):lower() == "hit" then
        local TargetPlayer = SilentAim.TargetPlayer
        if TargetPlayer and TargetPlayer.Character then
            local PredictedPosition = GetSilentPredictedPosition(TargetPlayer)
            if PredictedPosition then
                local HitChanceRoll = random(1, 100)
                if HitChanceRoll <= SilentAim.HitChance then
                    return newCFrame(PredictedPosition)
                end
                return OldIndex(t, k)
            end
        end
    end
    return OldIndex(t, k)
end
setreadonly(Meta, true)

local childActivatedConnection
local childAddedConnection
local childRemovedConnection

local function childActivatedFunction()
    local combat = getgenv().Holy.Combat
    local silentTarget = upper(getgenv().Holy.Options.Type) == "FOV" and getClosestPlayerToCursor(Settings.FieldOfView) or TargetPlayer
    if combat.Silent.Enabled and IsLocking and silentTarget and silentTarget.Character then
        local silent = combat.Silent
        local character = silentTarget.Character
        local targetPart = silent.MultipleParts.Enabled and getClosestPartFromPlayerToCursor(silent.MultipleParts, character) or findFirstChild(character, silent.Part)
        if not targetPart then return end
        local hitPosition = targetPart.Position
        local humanoid = character.Humanoid
        local humanoidStateType = humanoid:GetState()
        if humanoidStateType == jumping then
            hitPosition = hitPosition + newVector3(0, silent.Offsets.Jump.Amount, 0)
        elseif humanoidStateType == freeFall then
            hitPosition = hitPosition + newVector3(0, silent.Offsets.Fall.Amount, 0)
        end
        local targetVector = velocityCheck(character) and resolvePartVelocity(targetPart) or targetPart.Velocity
        local adjustedPosition = hitPosition + (targetVector * adjustPrediction(silent, targetPart))
        if Games[game.PlaceId] and Games[game.PlaceId].Name == "Hood Customs" then
            fireServer(MainEvent, mousePositionArgument.Argument, adjustedPosition + newVector3(0, 0, 0))
        else
            fireServer(MainEvent, mousePositionArgument.Argument, adjustedPosition)
        end
    end
end

local function onChildAdded(child)
    if isA(child, "Tool") then
        if childActivatedConnection then childActivatedConnection:Disconnect() end
        childActivatedConnection = child.Activated:Connect(childActivatedFunction)
    end
end

local function onChildRemoved(child)
    if isA(child, "Tool") and childActivatedConnection then
        childActivatedConnection:Disconnect()
    end
end

local function onCharacterAdded(character)
    if childAddedConnection then childAddedConnection:Disconnect() end
    if childRemovedConnection then childRemovedConnection:Disconnect() end
    if childActivatedConnection then childActivatedConnection:Disconnect() end
    childAddedConnection = character.ChildAdded:Connect(onChildAdded)
    childRemovedConnection = character.ChildRemoved:Connect(onChildRemoved)
end

if LocalPlayer.Character then onCharacterAdded(LocalPlayer.Character) end
LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

local currentTool = nil
for _, v in next, getChildren(LocalPlayer.Character or {}) do
    if isA(v, "Tool") then
        currentTool = v
        currentTool.Parent = LocalPlayer:FindFirstChildOfClass("Backpack")
        break
    end
end

InputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    local inputKeyCode = input.KeyCode
    local keyBind = getgenv().Holy.Keybinds
    local combat = getgenv().Holy.Combat
    local triggerBot = combat.TriggerBot
    if inputKeyCode == enumKeyCode[sub(upper(keyBind.Aimbot), 1, 1)] then
        IsLocking = not IsLocking
        Toggled = IsLocking and combat.Aimbot.Enabled
        SilentAim.Enabled = IsLocking and combat.Silent.Enabled
        if IsLocking then
            TargetPlayer = getClosestPlayerToCursor(inf)
            SilentAim.TargetPlayer = TargetPlayer
            if not TargetPlayer or not TargetPlayer.Character or not findFirstChild(TargetPlayer.Character, "Humanoid") then
                IsLocking = false
                Toggled = false
                SilentAim.Enabled = false
                TargetPlayer = nil
                SilentAim.TargetPlayer = nil
            end
        else
            TargetPlayer = nil
            SilentAim.TargetPlayer = nil
            LastUpdate = tick()
        end
    elseif inputKeyCode == enumKeyCode[sub(upper(keyBind.Resolver), 1, 1)] then
        getgenv().Holy.Checks.Resolver.Enabled = not getgenv().Holy.Checks.Resolver.Enabled
        if getgenv().Holy.Checks.Resolver.Notification then
            StarterGui:SetCore("SendNotification", {
                Title = "Resolver",
                Text = tostring(getgenv().Holy.Checks.Resolver.Enabled),
                Duration = 2,
            })
        end
    elseif inputKeyCode == enumKeyCode[sub(upper(keyBind.Flip360), 1, 1)] and combat["360"].Enabled then
        Toggle360 = not Toggle360
        if not Toggle360 then TotalRotation = 0 end
    elseif inputKeyCode == enumKeyCode[sub(upper(keyBind.TriggerBot), 1, 1)] then
        TriggerBotToggled = not TriggerBotToggled
        combat.TriggerBot.Enabled = TriggerBotToggled
        if TriggerBotToggled then
            TriggerBotTarget = getClosestPlayerToCursor(triggerBot.Range)
        else
            TriggerBotTarget = nil
        end
        StarterGui:SetCore("SendNotification", {
            Title = "TriggerBot",
            Text = "Toggled: " .. tostring(TriggerBotToggled),
            Duration = 2,
        })
    end
end)

RunService.Heartbeat:Connect(function()
    if Toggled and TargetPlayer then
        local character = TargetPlayer.Character
        if not character or not findFirstChild(character, "Humanoid") then
            Toggled = false
            SilentAim.Enabled = getgenv().Holy.Combat.Silent.Enabled
            TargetPlayer = nil
            SilentAim.TargetPlayer = nil
        end
    end
end)

Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == TargetPlayer then
        Toggled = false
        SilentAim.Enabled = getgenv().Holy.Combat.Silent.Enabled
        TargetPlayer = nil
        SilentAim.TargetPlayer = nil
    elseif leavingPlayer == TriggerBotTarget then
        TriggerBotTarget = nil
    elseif leavingPlayer == ForceHitTarget then
        ForceHitTarget = nil
    end
end)

getgenv().Loaded = true

-- ForceHit Logic
local plrs = game:GetService("Players")
local repl = game:GetService("ReplicatedStorage")
local threading = game:GetService("RunService")
local input = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local me = plrs.LocalPlayer

local mouse = function()
    if input.TouchEnabled then
        local viewportSize = camera.ViewportSize
        return Vector2.new(viewportSize.X / 2, viewportSize.Y / 2)
    else
        return input:GetMouseLocation()
    end
end

local get_closest_forcehit = function()
    if not me or not me.Character then return end
    
    local closest_player = nil
    local max_distance = math.huge
    local mouse_pos = mouse()

    for _, player in pairs(plrs:GetPlayers()) do
        if player ~= me and player.Character and player.Character:FindFirstChild("Head") then
            local screen_pos, on_screen = camera:WorldToViewportPoint(player.Character.Head.Position)
            if on_screen then
                local distance = (Vector2.new(screen_pos.X, screen_pos.Y) - mouse_pos).Magnitude
                if distance < max_distance then
                    max_distance = distance
                    closest_player = player
                end
            end
        end
    end
    
    ForceHitTarget = closest_player
end

local function setupTool(tool)
    if tool:IsA("Tool") then
        tool.Equipped:Connect(function()
            tool.Activated:Connect(function()
                local forceHit = getgenv().Holy.Combat.ForceHit
                if forceHit.Enabled then
                    -- Check if linked to camlock and camlock is active
                    if forceHit.LinkedToCamlock and not IsLocking then
                        return -- Skip if camlock is off and linked
                    end
                    
                    -- Use camlock target if linked, otherwise use ForceHit target
                    local target = forceHit.LinkedToCamlock and TargetPlayer or ForceHitTarget
                    if target and target.Character then
                        local hitParts = forceHit.HitParts
                        local selectedPart = nil
                        -- Select the first available part from HitParts
                        for _, partName in pairs(hitParts) do
                            selectedPart = target.Character:FindFirstChild(partName)
                            if selectedPart then break end
                        end
                        if selectedPart then
                            local Root = me.Character:WaitForChild("HumanoidRootPart")
                            local args = {
                                [1] = "Shoot",
                                [2] = {
                                    [1] = {
                                        [1] = {
                                            ["Instance"] = selectedPart,
                                            ["Normal"] = Root.CFrame.LookVector.unit,
                                            ["Position"] = Root.Position 
                                        }
                                    },
                                    [2] = {
                                        [1] = {
                                            ["thePart"] = selectedPart,
                                            ["theOffset"] = CFrame.new(Root.CFrame.LookVector.unit * 0.5) 
                                        }
                                    },
                                    [3] = Root.Position + Root.CFrame.LookVector * 10, 
                                    [4] = Root.Position,
                                    [5] = os.clock() 
                                }
                            }
                            repl.MainEvent:FireServer(unpack(args))
                        end
                    end
                end
            end)
        end)
    end
end

-- Connect to tools in Backpack
me.Backpack.ChildAdded:Connect(function(child)
    setupTool(child)
end)

for _, tool in pairs(me.Backpack:GetChildren()) do
    setupTool(tool)
end

-- Connect to currently equipped tool
if me.Character then
    local tool = me.Character:FindFirstChildOfClass("Tool")
    if tool then
        setupTool(tool)
    end
end

-- Connect to new character and tools
me.CharacterAdded:Connect(function(character)
    character.ChildAdded:Connect(function(child)
        setupTool(child)
    end)
end)

-- Update ForceHit target every frame (only if not linked to camlock)
threading.RenderStepped:Connect(function()
    if not getgenv().Holy.Combat.ForceHit.LinkedToCamlock then
        get_closest_forcehit()
    end
end)
